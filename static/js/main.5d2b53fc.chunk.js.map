{"version":3,"sources":["logo.svg","components/project-events.js","components/TransferState.js","components/pubsub.js","components/Form.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["ConnectedEvent","msg","this","args","TransferState","useState","transferState","setTransferState","useEffect","handle","eventClass","handler","sugar","event","detail","document","addEventListener","name","passive","unsubscribe","removeEventListener","subscribe","style","color","fontSize","Form","sampleApi","userData","FormData","handleInputChange","target","value","type","append","handlePublish","setTimeout","nativeEvent","CustomEvent","constructor","dispatchEvent","publish","console","log","onChange","onClick","xhr","XMLHttpRequest","oEvent","lengthComputable","percentComplete","loaded","total","evt","open","onreadystatechange","e","readyState","status","responseText","send","urls","a","window","caches","myCache","addAll","App","broadcast","users","setUsers","fetch","then","res","json","className","src","logo","alt","JSON","stringify","href","rel","addCache","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","BroadcastChannel","ReactDOM","render","StrictMode","getElementById","URL","process","origin","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration","registr"],"mappings":"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","file":"static/js/main.5d2b53fc.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.2d27ead7.svg\";","export class ConnectedEvent {\n  constructor(msg) {\n    this.args = [msg];\n  }\n}\n","import React, { useEffect, useState } from \"react\";\r\nimport { subscribe } from \"./pubsub\";\r\nimport { ConnectedEvent } from \"./project-events\";\r\n\r\nconst TransferState = () => {\r\n  const [transferState, setTransferState] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const handle = subscribe(ConnectedEvent, msg => {\r\n      setTransferState(msg);\r\n    });\r\n\r\n    return function cleanup() {\r\n      handle.unsubscribe();\r\n    };\r\n  });\r\n  return (\r\n      <p style={{ color: \"red\", fontSize: \"16px\" }}>\r\n        {transferState.msg}\r\n      </p>\r\n  );\r\n};\r\n\r\nexport default TransferState;\r\n","export function subscribe(eventClass, handler) {\n  let sugar = function (event) {\n    handler(...event.detail);\n  };\n  document.addEventListener(eventClass.name, sugar, { passive: true });\n  return {\n    unsubscribe: function unsubscribe() {\n      document.removeEventListener(eventClass.name, sugar);\n    },\n  };\n}\n\nexport function publish(event) {\n  let nativeEvent = new CustomEvent(event.constructor.name, {\n    detail: event.args,\n  });\n  document.dispatchEvent(nativeEvent);\n}\n","import React from \"react\";\r\nimport { ConnectedEvent } from \"./project-events\";\r\nimport { publish } from \"./pubsub\";\r\nimport TransferState from \"./TransferState\";\r\n\r\nconst Form = ({ sampleApi }) => {\r\n  const userData = new FormData();\r\n\r\n  function handleInputChange(event) {\r\n    const target = event.target;\r\n    const name = target.name;\r\n    const value = (target.type = \"text\" ? target.value : target.files[0]);\r\n    userData.append([name], value);\r\n  }\r\n\r\n  function handlePublish(msg) {\r\n    setTimeout(() => {\r\n      publish(new ConnectedEvent({ msg: msg }));\r\n      console.log(msg);\r\n    }, 500);\r\n  }\r\n\r\n  function onSubmit() {\r\n    var xhr = new XMLHttpRequest();\r\n\r\n    xhr.addEventListener(\"progress\", updateProgress);\r\n    xhr.addEventListener(\"load\", transferComplete);\r\n    // xhr.addEventListener(\"error\", transferFailed);\r\n    xhr.addEventListener(\"abort\", transferCanceled);\r\n\r\n    xhr.open(\"POST\", sampleApi);\r\n\r\n    xhr.onreadystatechange = function (e) {\r\n      if (xhr.readyState != 4) {\r\n        return;\r\n      }\r\n\r\n      if (xhr.status == 201) {\r\n        handlePublish(\"connection ok\");\r\n        // clearTimeout(noResponseTimer);\r\n      } else {\r\n        handlePublish(`connection error status ${xhr.responseText}`);\r\n      }\r\n    };\r\n    xhr.send(userData);\r\n\r\n    function updateProgress(oEvent) {\r\n      if (oEvent.lengthComputable) {\r\n        var percentComplete = (oEvent.loaded / oEvent.total) * 100;\r\n        handlePublish(`progress: ${percentComplete}`);\r\n      } else {\r\n        handlePublish(\"not able to show progress\");\r\n      }\r\n    }\r\n\r\n    function transferComplete(evt) {\r\n      handlePublish(\"The transfer is complete.\");\r\n    }\r\n\r\n    function transferFailed(evt) {\r\n      handlePublish(\"An error occurred while transferring the file.\");\r\n    }\r\n\r\n    function transferCanceled(evt) {\r\n      handlePublish(\"The transfer has been canceled by the user.\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <br />\r\n      <label>Upload image </label>\r\n      <input type=\"file\" name=\"avatar\" onChange={handleInputChange} />\r\n      <br />\r\n      <label>First Name </label>\r\n      <input type=\"text\" name=\"first_name\" onChange={handleInputChange} />\r\n      <br />\r\n      <button onClick={onSubmit}>submit</button>\r\n      <TransferState />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport BackgroundSync from \"./components/BackgroundSync\";\r\nimport Form from \"./components/Form\";\r\n\r\nconst sampleApi = \"https://reqres.in/api/users\";\r\n\r\nasync function addCache(urls) {\r\n  const myCache = await window.caches.open(\"response-cache\");\r\n  await myCache.addAll(urls);\r\n  console.log(\"added cache\", myCache);\r\n}\r\n\r\nfunction App({ broadcast }) {\r\n  const [users, setUsers] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch(sampleApi)\r\n      .then(res => res.json())\r\n      .then(res => setUsers(res))\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          {users && JSON.stringify(users)}\r\n        </p>\r\n        <Form sampleApi={sampleApi}/>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n        <button onClick={() => addCache([sampleApi])}>Register Router</button>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst broadcast = new BroadcastChannel('channel-123');\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App broadcast={broadcast} />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.register({\r\n  onSuccess: (registr) => {\r\n    console.log('success', registr)\r\n  }\r\n});\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}