{"version":3,"sources":["logo.svg","components/BackgroundSync.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["BackgroundSync","sampleApi","userData","FormData","handleInputChange","event","target","name","value","type","append","onChange","onClick","fetch","method","body","then","res","json","console","log","urls","a","window","caches","open","myCache","addAll","App","broadcast","useState","users","setUsers","useEffect","className","src","logo","alt","JSON","stringify","href","rel","addCache","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","BroadcastChannel","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration","registr"],"mappings":"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","file":"static/js/main.93aaf071.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.2d27ead7.svg\";","import React from \"react\";\r\n\r\nconst BackgroundSync = ({ sampleApi }) => {\r\n  const userData = new FormData();\r\n\r\n  function handleInputChange(event) {\r\n    const target = event.target;\r\n    const name = target.name;\r\n    const value = (target.type = \"text\" ? target.value : target.files[0]);\r\n    userData.append([name], value);\r\n  }\r\n\r\n  function onSubmit() {\r\n    fetch(sampleApi, {\r\n      method: \"POST\",\r\n      body: userData,\r\n    })\r\n      .then(res => res.json())\r\n      .then(res => console.log(\"success\", res))\r\n  }\r\n  return (\r\n    <div>\r\n      <br />\r\n      <label>Upload image </label>\r\n      <input type=\"file\" name=\"avatar\" onChange={handleInputChange} />\r\n      <br />\r\n      <label>First Name </label>\r\n      <input type=\"text\" name=\"first_name\" onChange={handleInputChange} />\r\n      <br />\r\n      <label>Last Name </label>\r\n      <input type=\"text\" name=\"last_name\" onChange={handleInputChange} />\r\n      <br/>\r\n      <label>Email </label>\r\n      <input type=\"email\" name=\"email\" onChange={handleInputChange} />\r\n      <br/>\r\n      <button onClick={onSubmit}>submit</button>\r\n      <br />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BackgroundSync;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport BackgroundSync from \"./components/BackgroundSync\";\r\n\r\nconst sampleApi = \"https://reqres.in/api/users\";\r\n\r\nasync function addCache(urls) {\r\n  const myCache = await window.caches.open(\"response-cache\");\r\n  await myCache.addAll(urls);\r\n  console.log(\"added cache\", myCache);\r\n}\r\n\r\nfunction App({ broadcast }) {\r\n  const [users, setUsers] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch(sampleApi)\r\n      .then(res => res.json())\r\n      .then(res => setUsers(res))\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          {users && JSON.stringify(users)}\r\n        </p>\r\n        <BackgroundSync sampleApi={sampleApi}/>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n        <button onClick={() => addCache([sampleApi])}>Register Router</button>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst broadcast = new BroadcastChannel('channel-123');\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App broadcast={broadcast} />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.register({\r\n  onSuccess: (registr) => {\r\n    console.log('success', registr)\r\n  }\r\n});\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}