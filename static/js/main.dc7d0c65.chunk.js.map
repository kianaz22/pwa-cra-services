{"version":3,"sources":["components/TransferMessage.js","components/Form.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["broadcast","BroadcastChannel","TransferMessage","useState","message","setMessage","onmessage","event","data","msg","console","log","style","color","fontSize","Form","sampleApi","userData","FormData","handleInputChange","target","name","value","type","files","append","handlePostMessage","postMessage","onChange","onClick","xhr","XMLHttpRequest","addEventListener","oEvent","lengthComputable","percentComplete","loaded","total","evt","response","open","onreadystatechange","e","readyState","status","send","urls","a","window","caches","myCache","addAll","App","users","setUsers","useEffect","fetch","then","res","json","className","JSON","stringify","addCache","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","headers","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration","registr"],"mappings":"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","file":"static/js/main.dc7d0c65.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nconst broadcast = new BroadcastChannel(\"channel-123\");\r\n\r\nconst TransferMessage = () => {\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  broadcast.onmessage = event => {\r\n    setMessage(event.data.msg);\r\n    console.log(event.data.msg);\r\n  };\r\n\r\n  return <p style={{ color: \"red\", fontSize: \"14px\" }}>{message}</p>;\r\n};\r\n\r\nexport default TransferMessage;\r\n","import React from \"react\";\r\nimport TransferMessage from \"./TransferMessage\";\r\nconst broadcast = new BroadcastChannel(\"channel-123\");\r\n\r\nconst Form = ({ sampleApi }) => {\r\n  const userData = new FormData();\r\n\r\n  function handleInputChange(event) {\r\n    const target = event.target;\r\n    const name = target.name;\r\n    const value = (target.type === \"text\" ? target.value : target.files[0]);\r\n    userData.append([name], value);\r\n  }\r\n\r\n  function handlePostMessage(msg) {\r\n  console.log(msg);\r\n  broadcast.postMessage({ type: \"MSG_ID\", msg: msg });\r\n}\r\n\r\n  function onSubmit() {\r\n    var xhr = new XMLHttpRequest();\r\n\r\n    xhr.addEventListener(\"progress\", updateProgress);\r\n    xhr.addEventListener(\"load\", transferComplete);\r\n    xhr.addEventListener(\"error\", transferFailed);\r\n    xhr.addEventListener(\"abort\", transferCanceled);\r\n\r\n    xhr.open(\"POST\", sampleApi, true);\r\n\r\n    xhr.onreadystatechange = function (e) {\r\n      if (xhr.readyState !== 4) {\r\n        return;\r\n      }\r\n\r\n      if (xhr.status === 201) {\r\n        handlePostMessage(\"connection ok\");\r\n      } else {\r\n        handlePostMessage(`connection error`);\r\n      }\r\n    };\r\n    xhr.send(userData);\r\n\r\n    function updateProgress(oEvent) {\r\n      if (oEvent.lengthComputable) {\r\n        var percentComplete = (oEvent.loaded / oEvent.total) * 100;\r\n        handlePostMessage(`upload progress: ${percentComplete}%`);\r\n      } else {\r\n        console.log(\"not able to show progress\");\r\n      }\r\n    }\r\n\r\n    function transferComplete(evt) {\r\n      handlePostMessage(`The transfer is complete.`);\r\n      console.log('response: ',xhr.response)\r\n    }\r\n\r\n    function transferFailed(evt) {\r\n      handlePostMessage(\"connection error. transfer will continue after connectivity is restored.\");\r\n    }\r\n\r\n    function transferCanceled(evt) {\r\n      handlePostMessage(\"The transfer has been canceled by the user.\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <br />\r\n      <label>Upload image </label>\r\n      <input type=\"file\" name=\"avatar\" onChange={handleInputChange} />\r\n      <br />\r\n      <label>First Name </label>\r\n      <input type=\"text\" name=\"first_name\" onChange={handleInputChange} />\r\n      <br />\r\n      <button onClick={onSubmit}>submit</button>\r\n      <TransferMessage />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport Form from \"./components/Form\";\r\n\r\nconst sampleApi = \"https://reqres.in/api/users\";\r\n\r\nasync function addCache(urls) {\r\n  const myCache = await window.caches.open(\"response-cache\");\r\n  await myCache.addAll(urls);\r\n  console.log(\"added cache\", myCache);\r\n}\r\n\r\nfunction App({ broadcast }) {\r\n  const [users, setUsers] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch(sampleApi)\r\n      .then(res => res.json())\r\n      .then(res => setUsers(res));\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <p>{users && JSON.stringify(users)}</p>\r\n        <Form sampleApi={sampleApi} />\r\n        <button onClick={() => addCache([sampleApi])}>Register Router</button>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst broadcast = new BroadcastChannel('channel-123');\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App broadcast={broadcast} />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.register({\r\n  onSuccess: (registr) => {\r\n    console.log('success', registr)\r\n  }\r\n});\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}